{"version":3,"sources":["logo.svg","services/googleMaps.js","components/OrdeView.js","services/firebase.js","components/OrderShow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Geocode","setApiKey","setLanguage","setRegion","enableDebug","fromAddress","then","response","console","log","results","geometry","location","lat","lng","error","OrdeView","props","position","useState","zoom","Card","style","margin","CardHeader","title","rcivername","subheader","date","Typography","CardContent","Map","height","center","TileLayer","attribution","url","Marker","Popup","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ordersRef","database","ref","OrderShow","ordersViewToShow","setordersViewToShow","useEffect","on","snap","temp","val","temp2","Object","entries","map","order","thisOrder","dateformat","DDdate","MMdate","YYdate","address","street","house","city","key","counter","reciverName","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,8KCC3CC,IAAQC,UAAU,2CAClBD,IAAQE,YAAY,MACpBF,IAAQG,UAAU,MAClBH,IAAQI,cAGRJ,IAAQK,YAAY,iFAAqBC,MACrC,SAAAC,GACIC,QAAQC,IAAIF,GADJ,MAEaA,EAASG,QAAQ,GAAGC,SAASC,SAA1CC,EAFA,EAEAA,IAAKC,EAFL,EAEKA,IACbN,QAAQC,IAAII,EAAKC,GACVP,KAEX,SAAAQ,GACIP,QAAQO,MAAMA,MAIPf,EAAf,E,KAAeA,I,gCCbA,SAASgB,EAASC,GAQ7B,IAAMC,EAAW,CAAC,QAAS,KARS,EASZC,mBAAS,IATG,mBAS7BC,EAT6B,UAUpC,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,OAAQ,SACnB,kBAACC,EAAA,EAAD,CACIC,MAAO,gDAAeR,EAAMS,WAC5BC,UAAWV,EAAMW,MACjB,kBAACC,EAAA,EAAD,OAIJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKT,MAAO,CAAEU,OAAQ,SAAWC,OAAQf,EAAUE,KAAMA,GACrD,kBAACc,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER,kBAACC,EAAA,EAAD,CAAQnB,SAAUA,GACd,kBAACoB,EAAA,EAAD,6BACyB,6BADzB,6B,qBCpBtBC,IAASC,cAVY,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAGV,ICTLC,EDSgBV,IAASW,WCTVC,IAAI,UAGR,SAASC,IAAa,IAAD,EACJjC,mBAAS,CAAC,KADN,gCAEgBA,mBAAS,OAFzB,mBAEzBkC,EAFyB,KAEPC,EAFO,KAGhCC,qBAAU,WAINN,EAAUO,GAAG,SAAS,SAAAC,GAClB,IAAIC,EAAOD,EAAKE,MACZC,EAAQC,OAAOC,QAAQJ,GAE3BJ,EAAoBM,EAAMG,KAAI,SAACC,GAC3B,IAAIC,EAAYD,EAAM,GAElBE,EAAaF,EAAM,GAAGG,OAAS,IAAMH,EAAM,GAAGI,OAAS,IAAMH,EAAUI,OACvEC,EAAUL,EAAUM,OAAS,IAAMN,EAAUO,MAAQ,IAAMP,EAAUQ,KAGzE,OAFAjE,QAAQC,IAAI6D,GACZ9D,QAAQC,IAAIyD,GAER,kBAAClD,EAAD,CAAU0D,IAAKC,IAAWjD,WAAYsC,EAAM,GAAGY,YAAahD,KAAMsC,EAAYI,QAASA,aAdpG,IAqBH,IAAIK,EAAU,EACd,OACI,6BACKtB,GCpBEwB,MAVf,WAEE,OACE,yBAAKC,UAAU,OACb,kBAAC1B,EAAD,QCEc2B,QACW,cAA7BC,OAAOpE,SAASqE,UAEe,UAA7BD,OAAOpE,SAASqE,UAEhBD,OAAOpE,SAASqE,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAA9E,GACLP,QAAQO,MAAMA,EAAM+E,c","file":"static/js/main.6a2a04fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Geocode from \"react-geocode\";\r\nGeocode.setApiKey(\"AIzaSyBCVOA12VNJjoASb-6SP9mFzsOVHidxb0s\");\r\nGeocode.setLanguage(\"iw\");\r\nGeocode.setRegion(\"il\");\r\nGeocode.enableDebug();\r\n\r\nvar temp\r\nGeocode.fromAddress(\"הגליל 13 קרית אתא\").then(\r\n    response => {\r\n        console.log(response);\r\n        const { lat, lng } = response.results[0].geometry.location;\r\n        console.log(lat, lng);\r\n        temp = response\r\n    },\r\n    error => {\r\n        console.error(error);\r\n    }\r\n);\r\n\r\nexport default Geocode","import React, { useState } from 'react';\r\nimport { Paper, Typography, Card, CardContent, CardHeader } from '@material-ui/core/';\r\nimport Geocode from '../services/googleMaps';\r\nimport L from 'leaflet';\r\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\r\n\r\nexport default function OrdeView(props) {\r\n\r\n    function getCordinent(Address) {\r\n        console.log(Address);\r\n        Geocode.fromAddress(Address).then((response) => {\r\n            console.log(response);\r\n        })\r\n    }\r\n    const position = [51.505, -0.09]\r\n    const [zoom, setZoom] = useState(13)\r\n    return (\r\n        <Card style={{ margin: \"10px\" }}>\r\n            <CardHeader\r\n                title={\"משלוח אל: \" + props.rcivername}\r\n                subheader={props.date}>\r\n                <Typography>\r\n\r\n                </Typography>\r\n            </CardHeader>\r\n            <CardContent>\r\n                <Map style={{ height: \"500px\" }} center={position} zoom={zoom}>\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <Marker position={position}>\r\n                        <Popup>\r\n                            A pretty CSS3 popup. <br /> Easily customizable.\r\n          </Popup>\r\n                    </Marker>\r\n                </Map>\r\n            </CardContent>\r\n\r\n\r\n\r\n\r\n        </Card>\r\n    )\r\n}","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCKxKgE1Mh7DauQBBhHAnJnnuIJaRLhj74\",\r\n    authDomain: \"orders-cd834.firebaseapp.com\",\r\n    databaseURL: \"https://orders-cd834.firebaseio.com\",\r\n    projectId: \"orders-cd834\",\r\n    storageBucket: \"orders-cd834.appspot.com\",\r\n    messagingSenderId: \"1099359698304\",\r\n    appId: \"1:1099359698304:web:1f290a07e5ad1c1740d565\",\r\n    measurementId: \"G-HL9D0JZH4N\"\r\n  };\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const db = firebase.database();\r\n\r\n  ","import React, { useLayoutEffect, useEffect, useState } from 'react';\r\nimport OrdeView from './OrdeView';\r\nimport { db } from '../services/firebase';\r\n\r\nvar ordersRef = db.ref('orders')\r\n\r\n\r\nexport default function OrderShow() {\r\n    const [orders, Setorders] = useState([\"\"])\r\n    const [ordersViewToShow, setordersViewToShow] = useState(null)\r\n    useEffect(() => {\r\n        getOrdersFromDB()\r\n    }, []);\r\n    function getOrdersFromDB() {\r\n        ordersRef.on('value', snap => {\r\n            var temp = snap.val()\r\n            var temp2 = Object.entries(temp)\r\n            //console.log(temp2);\r\n            setordersViewToShow(temp2.map((order) => {\r\n                var thisOrder = order[1]\r\n                //console.log(order[1]);\r\n                var dateformat = order[1].DDdate + \"/\" + order[1].MMdate + \"/\" + thisOrder.YYdate\r\n                var address = thisOrder.street + \" \" + thisOrder.house + \" \" + thisOrder.city\r\n                console.log(address);\r\n                console.log(dateformat);\r\n                return (\r\n                    <OrdeView key={counter++} rcivername={order[1].reciverName} date={dateformat} address={address} />\r\n                )\r\n            })\r\n            )\r\n        })\r\n    }\r\n\r\n    var counter = 0\r\n    return (\r\n        <div>\r\n            {ordersViewToShow}\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}","import React ,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OrderShow from './components/OrderShow';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <OrderShow />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/leaflet/dist/leaflet.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}